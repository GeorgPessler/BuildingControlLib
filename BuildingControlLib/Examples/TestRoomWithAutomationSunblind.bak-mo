within BuildingControlLib.Examples;
model TestRoomWithAutomationSunblind
  "Model which simulates a room for one day with a sun blind automation applied"
  BuildingControl.VDI3813.Sources.Analog.PrescribedT prescribedT
    annotation (Placement(transformation(extent={{-414,242},{-394,262}})));
  BuildingControl.VDI3813.Sources.Analog.PrescribedT prescribedT1
    annotation (Placement(transformation(extent={{-416,102},{-396,122}})));
  BuildingControl.VDI3813.Sources.Physical.PrescribedP prescribedP
    annotation (Placement(transformation(extent={{-416,216},{-396,236}})));
  BuildingControl.VDI3813.Sources.Physical.PrescribedB prescribedB1
    annotation (Placement(transformation(extent={{-416,128},{-396,148}})));
      BuildingControl.VDI3813.Sources.AirTemperature.PrescribedT_BMS
    prescribedT_BMS
    annotation (Placement(transformation(extent={{-416,158},{-396,178}})));
      BuildingControl.VDI3813.Sources.Presence.PrescribedP_MAN prescribedP_MAN
    annotation (Placement(transformation(extent={{-416,184},{-396,204}})));
  Modelica.Blocks.Sources.Constant sourceAirTempOut(k=273.15 + 10)
    "Source of temperature measurement of outdoor air temperature"
    annotation (Placement(transformation(extent={{-456,98},{-436,118}})));
  Modelica.Blocks.Sources.BooleanStep     sourceP(startValue=false)
    "Source to define detection of a person in a room. if == true then person present."
    annotation (Placement(transformation(extent={{-456,222},{-436,242}})));
  Modelica.Blocks.Sources.BooleanStep     sourceWindow(startValue=true,
      startTime=50)
    "Boundary condition for window detector, if false then window is open"
    annotation (Placement(transformation(extent={{-456,128},{-436,148}})));
  Modelica.Blocks.Sources.Constant sourceT_BMS(k=0)
    "Boundary condition to set T_BMS i.e. relative change of temperature setpoint from BMS system in Kelvin. Temperature difference ! ."
    annotation (Placement(transformation(extent={{-454,160},{-434,180}})));
  Modelica.Blocks.Sources.BooleanConstant sourceP_MAN(k=true)
    "Source to give feedback from user that occupant is in room. if == true then occupant present."
    annotation (Placement(transformation(extent={{-456,190},{-436,210}})));
  BuildingControl.VDI3813.Sources.Analog.PrescribedH
                             prescribedH
    annotation (Placement(transformation(extent={{-416,266},{-396,286}})));
  Modelica.Blocks.Sources.Constant sourceH(k=100000)
    "Source to define brightness of outdoor illuminance in lux"
    annotation (Placement(transformation(extent={{-456,266},{-436,286}})));
  BuildingControl.VDI3813.MacroFunctions.MacroSunblind macroSunBlind
    annotation (Placement(transformation(extent={{-324,40},{194,286}})));
  BuildingControl.VDI3813.Sources.AirTemperature.PrescribedCMD_T
    prescribedCMD_T
    annotation (Placement(transformation(extent={{-416,68},{-396,88}})));
  Modelica.Blocks.Sources.Constant sourceUserSetpoint(k=0)
    "Source to define boundary condition of user"
    annotation (Placement(transformation(extent={{-454,62},{-434,82}})));
  Utilities.Rooms.Room_withSunshadeLowOrder room_withSunshade
    annotation (Placement(transformation(extent={{-334,400},{188,650}})));
  BuildingControl.VDI3813.Sensors.SensorM sensorM
    annotation (Placement(transformation(extent={{246,184},{292,288}})));
equation
  connect(sourceAirTempOut.y,prescribedT1. u) annotation (Line(
      points={{-435,108},{-426,108},{-426,112},{-414,112}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(sourceP.y,prescribedP. u) annotation (Line(
      points={{-435,232},{-428,232},{-428,228},{-414,228}},
      color={255,0,255},
      smooth=Smooth.None));
  connect(sourceWindow.y,prescribedB1. u) annotation (Line(
      points={{-435,138},{-424,138},{-424,140},{-414,140}},
      color={255,0,255},
      smooth=Smooth.None));
  connect(sourceT_BMS.y,prescribedT_BMS. u) annotation (Line(
      points={{-433,170},{-414,170},{-414,168}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(sourceP_MAN.y,prescribedP_MAN. u) annotation (Line(
      points={{-435,200},{-424,200},{-424,194},{-414,194}},
      color={255,0,255},
      smooth=Smooth.None));
  connect(sourceH.y,prescribedH. u) annotation (Line(
      points={{-435,276},{-414,276}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(prescribedH.H, macroSunBlind.H) annotation (Line(
      points={{-394.1,276},{-380,276},{-380,236.8},{-318.82,236.8}},
      color={0,0,0},
      smooth=Smooth.None));
  connect(prescribedT.T, macroSunBlind.T) annotation (Line(
      points={{-392.1,252},{-380,252},{-380,225.32},{-316.23,225.32}},
      color={0,0,0},
      smooth=Smooth.None));
  connect(prescribedP_MAN.P_MAN, macroSunBlind.P_MAN) annotation (Line(
      points={{-394.1,194},{-360,194},{-360,197.44},{-298.1,197.44}},
      color={0,0,0},
      thickness=1,
      smooth=Smooth.None));
  connect(prescribedP.P, macroSunBlind.P) annotation (Line(
      points={{-395.9,226},{-380.05,226},{-380.05,213.84},{-313.64,213.84}},
      color={0,0,0},
      smooth=Smooth.None));
  connect(prescribedB1.B, macroSunBlind.B) annotation (Line(
      points={{-395.9,138},{-376,138},{-376,151.52},{-318.82,151.52}},
      color={0,0,0},
      smooth=Smooth.None));
  connect(prescribedT1.T, macroSunBlind.T1) annotation (Line(
      points={{-394.1,112},{-342,112},{-342,138.4},{-318.82,138.4}},
      color={0,0,0},
      smooth=Smooth.None));
  connect(prescribedT_BMS.T_BMS, macroSunBlind.T_BMS) annotation (Line(
      points={{-394.1,168},{-394.1,182},{-352,182},{-352,200},{-295.51,200},{
          -295.51,174.48}},
      color={0,0,0},
      thickness=1,
      smooth=Smooth.None));
  connect(prescribedCMD_T.CMD_T, macroSunBlind.CMD) annotation (Line(
      points={{-394.1,78},{-338,78},{-338,120.36},{-308.46,120.36}},
      color={0,0,0},
      smooth=Smooth.None));
  connect(sourceUserSetpoint.y, prescribedCMD_T.u) annotation (Line(
      points={{-433,72},{-420,72},{-420,78},{-414,78}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(macroSunBlind.M, sensorM.M) annotation (Line(
      points={{157.74,235.98},{204.87,235.98},{204.87,236},{246,236}},
      color={0,0,0},
      smooth=Smooth.None));
  connect(sensorM.y, room_withSunshade.uOperateSunblind) annotation (Line(
      points={{296.6,236},{296.6,236},{378,236},{378,740},{-73,740},{-73,637.5}},
      color={255,0,255},
      smooth=Smooth.None));

  connect(prescribedT.u, room_withSunshade.RoomTemperature) annotation (Line(
      points={{-412,252},{-496,252},{-496,362},{264,362},{264,390},{264,525},{
          240,525},{214.1,525}},
      color={0,0,127},
      smooth=Smooth.None));
  annotation (
    Diagram(coordinateSystem(extent={{-600,40},{400,800}}, preserveAspectRatio=
            false), graphics),
    Icon(coordinateSystem(extent={{-600,40},{400,800}})),
    experiment(StopTime=86400, Interval=3600),
    __Dymola_experimentSetupOutput,
    Documentation(revisions="<html>
<ul>
<li>March 07, 2017&nbsp; by Georg Ferdinand Schneider &amp; Georg Ambrosius Pe&szlig;ler:<br>Implemented.</li>
</ul>
</html>
"));
end TestRoomWithAutomationSunblind;
