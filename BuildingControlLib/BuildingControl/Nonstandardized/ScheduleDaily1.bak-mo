within BuildingControlLib.BuildingControl.Nonstandardized;
block ScheduleDaily1 "Model to implement a daily schedule"
  extends Modelica.Blocks.Interfaces.SO;
  /***   ***   ***   ***   ***   ***   ***   ***   ***   ***/
  // Parameters
  parameter Real startTime[1,5] = {{0,0,0,0,0.0}}
    "Array with start time and off set value, input time using the following format: {{days,hours,minutes,seconds,startValue}}";
  parameter Real offset[:]={0.0} "Offsets of output signals";
  parameter Real inputIntervalsAndValue[:,5] = {
                            {1,8,11,0,0.0},
                            {1,8,11,0,0.5},
                            {1,11,11,0,0.5},
                            {1,11,11,11,0.0},
                            endValue}
    "Array with hours. Format: {{days,hours,minutes,seconds,value}}. Need to leave endValue parameter as last item. Discontinuities allowed by introducing values in table twice ";

      parameter Real val = startTime[1,5];
  parameter Real endValue[5] = {2,0,0,0,val}
    "Array needed to fix periodicity, here for daily periodicty it needs to restart on day two. Time format as follows : {{days,hours,minutes,seconds,startValue}}";
  /***   ***   ***   ***   ***   ***   ***   ***   ***   ***/
  // Protected parameters which must not be changed for fixed periodicity e.g. daily schedule
protected
  parameter Modelica.SIunits.Conversions.NonSIunits.Time_hour nSecondsPerDay = 24*nSecondsPerMinute*nSecondsPerMinute
    "Numbers of hours for one day";
  parameter Modelica.SIunits.Conversions.NonSIunits.Time_minute nSecondsPerHour = nSecondsPerMinute*60
    "Numbers of minutes for one hour";
  parameter Modelica.SIunits.Time nSecondsPerMinute = 60
    "Numbers of seconds for one minute";
  parameter Real table[:,:] = {{inputIntervalsAndValue[i,1]*nSecondsPerDay + inputIntervalsAndValue[i,2]*nSecondsPerHour + inputIntervalsAndValue[i,3]*nSecondsPerMinute + inputIntervalsAndValue[i,4],  inputIntervalsAndValue[i,5]}  for i in 1:size(inputIntervalsAndValue,1)}
    "Compose table according to intervals entered by user";
public
          Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          offset = offset,
          startTime = startTime[1,1]*nSecondsPerDay + startTime[1,2]*nSecondsPerHour + startTime[1,3]*nSecondsPerMinute + startTime[1,4],
          table = table,
    extrapolation = Modelica.Blocks.Types.Extrapolation.Periodic,
    smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
    annotation (Placement(transformation(extent={{-20,-20},{20,20}})));

equation
  connect(combiTimeTable.y[1], y) annotation (Line(
      points={{22,0},{64,0},{64,0},{110,0}},
      color={0,0,127},
      smooth=Smooth.None));
  annotation (experiment(StopTime=1.2096e+006, Interval=1000),
      __Dymola_experimentSetupOutput,
              Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
            {100,100}}), graphics={
    Line(points={{-86,-90},{-86,68}},
                                  color={192,192,192}),
    Polygon(
      points={{-86,90},{-94,68},{-78,68},{-86,90}},
      lineColor={192,192,192},
      fillColor={192,192,192},
      fillPattern=FillPattern.Solid),
    Line(points={{-90,-86},{70,-86}},
                                  color={192,192,192}),
    Polygon(
      points={{92,-86},{70,-94},{70,-78},{92,-86}},
      lineColor={192,192,192},
      fillColor={192,192,192},
      fillPattern=FillPattern.Solid),
        Text(
          extent={{-30,-90},{18,-96}},
          lineColor={0,0,0},
          pattern=LinePattern.DashDot,
          lineThickness=0.5,
          fillColor={192,192,192},
          fillPattern=FillPattern.Solid,
          textString="time"),
        Text(
          extent={{-17,9},{17,-9}},
          lineColor={0,0,0},
          pattern=LinePattern.DashDot,
          lineThickness=0.5,
          fillColor={192,192,192},
          fillPattern=FillPattern.Solid,
          origin={-91,7},
          rotation=90,
          textString="Output signal"),
        Line(
          points={{-86,-50},{-76,-50},{-76,26},{-62,26},{-62,-50},{-54,-50},{-54,
              26},{-38,26},{-38,-52},{66,-52}},
          color={0,0,255},
          smooth=Smooth.None)}),
                          Diagram(coordinateSystem(preserveAspectRatio=false,
          extent={{-100,-100},{100,100}}), graphics={
                                Rectangle(
        extent={{-100,-100},{100,100}},
        lineColor={0,0,127},
        fillColor={255,255,255},
        fillPattern=FillPattern.Solid),
    Line(points={{-88,-92},{-88,66}},
                                  color={192,192,192}),
    Polygon(
      points={{-88,88},{-96,66},{-80,66},{-88,88}},
      lineColor={192,192,192},
      fillColor={192,192,192},
      fillPattern=FillPattern.Solid),
    Line(points={{-92,-88},{68,-88}},
                                  color={192,192,192}),
    Polygon(
      points={{90,-88},{68,-96},{68,-80},{90,-88}},
      lineColor={192,192,192},
      fillColor={192,192,192},
      fillPattern=FillPattern.Solid),
        Line(
          points={{-88,44},{-64,44},{8,-88},{68,-88}},
          color={0,0,0},
          smooth=Smooth.None,
          pattern=LinePattern.Dash,
          thickness=0.5),
        Text(
          extent={{-66,-26},{-36,-34}},
          lineColor={0,0,0},
          pattern=LinePattern.DashDot,
          lineThickness=0.5,
          fillColor={192,192,192},
          fillPattern=FillPattern.Solid,
          textString="Curve [nCurves]"),
        Text(
          extent={{-32,-92},{16,-98}},
          lineColor={0,0,0},
          pattern=LinePattern.DashDot,
          lineThickness=0.5,
          fillColor={192,192,192},
          fillPattern=FillPattern.Solid,
          textString="Input signal"),
        Text(
          extent={{-17,9},{17,-9}},
          lineColor={0,0,0},
          pattern=LinePattern.DashDot,
          lineThickness=0.5,
          fillColor={192,192,192},
          fillPattern=FillPattern.Solid,
          origin={-93,5},
          rotation=90,
          textString="Output signal"),
        Text(
          extent={{-66,60},{-44,48}},
          lineColor={0,0,0},
          pattern=LinePattern.DashDot,
          lineThickness=0.5,
          fillColor={192,192,192},
          fillPattern=FillPattern.Solid,
          textString="Interval coordinates lefthandside [nCurves]
(x,y)"),Line(
          points={{-62,44},{-56,50}},
          color={0,0,0},
          smooth=Smooth.None),
        Text(
          extent={{24,-46},{46,-58}},
          lineColor={0,0,0},
          pattern=LinePattern.DashDot,
          lineThickness=0.5,
          fillColor={192,192,192},
          fillPattern=FillPattern.Solid,
          textString="Interval coordinates righthandside [nCurves]
(x,y)"),Line(
          points={{34,-60},{12,-84}},
          color={0,0,0},
          smooth=Smooth.None)}),
    Documentation(info="<html>
<h4><span style=\"color:#008000\">Limitations</span></h4>
<p>Entering dates with day greater than 1 is illegal, e.g. {2,0,0,0,11.0} as this clashes with the periodicity definition. Simulation will fail.</p>
</html>"));
end ScheduleDaily1;
