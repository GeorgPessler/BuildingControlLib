within BuildingControlLib.BuildingControl.VDI3813.ApplicationFunctions.Examples;
model TesterPriorityControl1
  "Model for testing the functionality of PriorityControl"
  extends Modelica.Icons.Example;

  Modelica.Blocks.Sources.Step     S_PROT_Pos(
    startTime=200,
    height=-1.2,
    offset=0.2)
    annotation (Placement(transformation(extent={{-100,46},{-80,66}})));
  Sunshading.PriorityControl_1SG
                             priorityControl
    annotation (Placement(transformation(extent={{4,-84},{94,86}})));
  Modelica.Blocks.Sources.BooleanStep     B_WINDOW(startTime=100)
    "Constant source for window state in rooms (true = closed/ window is blocked , false = open/window is free"
    annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
  Modelica.Blocks.Sources.Constant S_PROT_Angle(k=10)
    annotation (Placement(transformation(extent={{-76,28},{-56,48}})));

  Modelica.Blocks.Sources.Step     S_MAINT_Pos(
    height=-1.3,
    offset=0.3,
    startTime=300)
    annotation (Placement(transformation(extent={{-100,8},{-80,28}})));
  Modelica.Blocks.Sources.Constant S_MAINT_Angle(k=20)
    annotation (Placement(transformation(extent={{-78,-8},{-58,12}})));

    Modelica.Blocks.Sources.Step     S_MAN_Pos(
    startTime=400,
    height=-1.4,
    offset=0.4)
    annotation (Placement(transformation(extent={{-100,-34},{-80,-14}})));
  Modelica.Blocks.Sources.Constant S_MAN_Angle(k=30)
    annotation (Placement(transformation(extent={{-76,-54},{-56,-34}})));

    Modelica.Blocks.Sources.Step     S_AUTO_Pos(
    height=-1.5,
    offset=0.5,
    startTime=500)
    annotation (Placement(transformation(extent={{-98,-98},{-78,-78}})));
  Modelica.Blocks.Sources.Constant S_AUTO_Angle(k=40)
    annotation (Placement(transformation(extent={{-72,-120},{-52,-100}})));

  Sources.Binary.PrescribedB_WINDOW prescribedB_WINDOW
    annotation (Placement(transformation(extent={{-60,80},{-40,100}})));
  Sources.Sunshade.PrescribedS_PROT prescribedS_PROT
    annotation (Placement(transformation(extent={{-40,18},{-20,38}})));
  Sources.Sunshade.PrescribedS_MAINT prescribedS_MAINT
    annotation (Placement(transformation(extent={{-42,-20},{-22,0}})));
  Sources.Sunshade.PrescribedS_MAN prescribedS_MAN
    annotation (Placement(transformation(extent={{-40,-46},{-20,-26}})));
  Sources.Sunshade.PrescribedS_AUTO prescribedS_AUTO
    annotation (Placement(transformation(extent={{-38,-104},{-18,-84}})));
equation
  connect(prescribedB_WINDOW.u, B_WINDOW.y) annotation (Line(
      points={{-58,90},{-68,90},{-68,90},{-79,90}},
      color={255,0,255},
      smooth=Smooth.None));
  connect(prescribedB_WINDOW.B_WINDOW, priorityControl.B_WINDOW) annotation (Line(
      points={{-38.1,90},{-16,90},{-16,43.5},{13,43.5}},
      color={0,0,0},
      thickness=1,
      smooth=Smooth.None));
  connect(prescribedS_PROT.S_PROT, priorityControl.S_PROT) annotation (Line(
      points={{-18.1,28},{-4,28},{-4,18},{13,18}},
      color={0,0,0},
      thickness=1,
      smooth=Smooth.None));
  connect(prescribedS_PROT.u[1], S_PROT_Pos.y) annotation (Line(
      points={{-38,27},{-44,27},{-44,28},{-50,28},{-50,56},{-79,56}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(prescribedS_PROT.u[2], S_PROT_Angle.y) annotation (Line(
      points={{-38,29},{-50,29},{-50,38},{-55,38}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(prescribedS_MAINT.S_MAINT, priorityControl.S_MAINT) annotation (
      Line(
      points={{-20.1,-10},{-6,-10},{-6,-7.5},{13,-7.5}},
      color={0,0,0},
      thickness=1,
      smooth=Smooth.None));
  connect(prescribedS_AUTO.S_AUTO, priorityControl.S_AUTO) annotation (Line(
      points={{-16.1,-94},{-2,-94},{-2,-58.5},{13,-58.5}},
      color={0,0,0},
      thickness=1,
      smooth=Smooth.None));
  connect(S_MAINT_Pos.y, prescribedS_MAINT.u[1]) annotation (Line(
      points={{-79,18},{-50,18},{-50,-12},{-46,-12},{-46,-11},{-40,-11}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(S_MAINT_Angle.y, prescribedS_MAINT.u[2]) annotation (Line(
      points={{-57,2},{-58,2},{-58,-9},{-40,-9}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(S_MAN_Pos.y, prescribedS_MAN.u[1]) annotation (Line(
      points={{-79,-24},{-50,-24},{-50,-38},{-44,-38},{-44,-37},{-38,-37}},
      color={0,0,127},
      smooth=Smooth.None));

  connect(S_MAN_Angle.y, prescribedS_MAN.u[2]) annotation (Line(
      points={{-55,-44},{-52.5,-44},{-52.5,-35},{-38,-35}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(S_AUTO_Pos.y, prescribedS_AUTO.u[1]) annotation (Line(
      points={{-77,-88},{-42,-88},{-42,-95},{-36,-95}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(S_AUTO_Angle.y, prescribedS_AUTO.u[2]) annotation (Line(
      points={{-51,-110},{-42,-110},{-42,-93},{-36,-93}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(priorityControl.S_MAN, prescribedS_MAN.S_MAN) annotation (Line(
      points={{13,-33},{-2.5,-33},{-2.5,-36},{-18.1,-36}},
      color={0,0,0},
      thickness=1,
      smooth=Smooth.None));
  annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
            -140},{100,100}}),                                                                     graphics), Icon(
        coordinateSystem(extent={{-100,-140},{100,100}})),
    experiment(StopTime=1000),
    __Dymola_experimentSetupOutput);
end TesterPriorityControl1;
