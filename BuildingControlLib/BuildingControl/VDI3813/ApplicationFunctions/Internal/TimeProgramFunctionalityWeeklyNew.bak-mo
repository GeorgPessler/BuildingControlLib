within BuildingControlLib.BuildingControl.VDI3813.ApplicationFunctions.Internal;
block TimeProgramFunctionalityWeeklyNew
  "Time program functionality based on Modelica.Blocks.TimeTable"

      extends
    BuildingControlLib.BuildingControl.VDI3813.Interfaces.Partial.PartialFunctionality;

  /***   ***   ***   ***   ***   ***   ***   ***   ***   ***/
  // Connector
  Interfaces.Time.ValueCurrentTimeAndDateInput D_ACT
    "Input connector of ValueCurrentTimeAndDate"
    annotation (Placement(transformation(extent={{-100,20},{-60,60}})));
  Interfaces.EnergyMode.CommandEnergyModeTimeScheduleOutput M_BMS
    "Output connector of CommandEnergyModeTimeSchedule"
                                                      annotation (
      Placement(transformation(extent={{100,20},{140,60}}), iconTransformation(
          extent={{100,20},{140,60}})));
   parameter Integer PAR_CAL = -1 "Calendar days when there is a exception";

  // periodic table for a weekly schedule
  parameter Real startTime[1,5] = {{0,0,0,0,0.0}}
    "Array with start time and value format: {{days,hours,minutes,seconds,startValue}}";
  parameter Real endValue[5] = {8,0,0,0,0.0}
    "Array with start time and value format: {{days,hours,minutes,seconds,startValue}}";
  parameter Real PAR_WSCH[:,5] = {
                            {1,7,30,11,0.0},
                            {1,7,30,11,1.0},
                            {1,18,30,11,1.0},
                            {1,18,30,11,0.0},
                            endValue}
    "Array with hours. Format: {{days,hours,minutes,seconds,value}}. Need to leave endValue parameter as last item. Discontinuities allowed by introducing values in table twice ";

      parameter Real PAR_ESCH[:,5] = {
                            {6,10,0,0,0.0},
                            {6,10,0,0,1.0},
                            {6,12,30,0,1.0},
                            {6,12,30,0,0.0},
                            endValue}
    "Array with hours. Format: {{days,hours,minutes,seconds,value}}. Need to leave endValue parameter as last item. Discontinuities allowed by introducing values in table twice ";

  parameter Modelica.SIunits.Conversions.NonSIunits.Time_hour nSecondsPerDay = 24*nSecondsPerMinute*nSecondsPerMinute
    "Numbers of hours for one day";
  parameter Modelica.SIunits.Conversions.NonSIunits.Time_minute nSecondsPerHour = nSecondsPerMinute*60
    "Numbers of minutes for one hour";
  parameter Modelica.SIunits.Time nSecondsPerMinute = 60
    "Numbers of seconds for one minute";
  parameter Real tableWeekday[:,:] = {{PAR_WSCH[i,1]*nSecondsPerDay + PAR_WSCH[i,2]*nSecondsPerHour + PAR_WSCH[i,3]*nSecondsPerMinute + PAR_WSCH[i,4],  PAR_WSCH[i,5]}  for i in 1:size(PAR_WSCH,1)};
  parameter Real tableException[:,:] = {{PAR_ESCH[i,1]*nSecondsPerDay + PAR_ESCH[i,2]*nSecondsPerHour + PAR_ESCH[i,3]*nSecondsPerMinute + PAR_ESCH[i,4],  PAR_ESCH[i,5]}  for i in 1:size(PAR_ESCH,1)};

Modelica.Blocks.Sources.CombiTimeTable weeklySchedule(
          offset = {startTime[1,5]},
          startTime = startTime[1,1]*nSecondsPerDay + startTime[1,2]*nSecondsPerHour + startTime[1,3]*nSecondsPerMinute + startTime[1,4],
          table = tableWeekday,
    extrapolation = Modelica.Blocks.Types.Extrapolation.Periodic,
    smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
    "weekly schedule"
    annotation (Placement(transformation(extent={{-20,-20},{20,20}})));
Modelica.Blocks.Sources.CombiTimeTable execptionSchedule(
          offset = {startTime[1,5]},
          startTime = startTime[1,1]*nSecondsPerDay + startTime[1,2]*nSecondsPerHour + startTime[1,3]*nSecondsPerMinute + startTime[1,4],
          table = tableException,
    extrapolation = Modelica.Blocks.Types.Extrapolation.Periodic,
    smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
    "weekly schedule"
    annotation (Placement(transformation(extent={{-20,-20},{20,20}})));

algorithm
      M_BMS.commandEnergyModeTimeSchedule := EM.economy;

  annotation (experiment(StopTime=1.2096e+006, Interval=1000),
      __Dymola_experimentSetupOutput);
end TimeProgramFunctionalityWeeklyNew;
